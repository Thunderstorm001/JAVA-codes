public class BSTSearch {
    static class Node 
    {
        int data ;
        Node left;
        Node right;
        Node (int data)
        {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
    public static boolean search(Node root,int val)
    {
        if(root==null)
        {
            return false;
        }
        if(root.data ==val)
        {
            return true;
        }
        if(root.data>val)
        {
            return search(root.left, val);
        }
        else 
        {
           return search(root.right, val);
        }
    }

    public static Node Insert(Node root,int val)

    {
        if(root==null) 
        {
            return new Node(val);
        }
        if(root.data>val)
        {
            root.left=Insert(root.left,val);
        }
       if(root.data<val)
        {
            root.right=Insert(root.right,val);
        }
        return root;
    }
    public static void Inorder(Node root)
    {
        if(root==null)
        {
            return ;
        }
        Inorder(root.left);
        System.out.println(root.data);
        Inorder(root.right);
    }
    public static void main(String[] args) 
    {
        int values[]={5,1,3,4,2,7};
        Node root = null;

        for(int i=0; i<values.length; i++)
        {
            root=Insert(root,values[i]);
        }

        Inorder(root);
        System.out.println();
        if(search(root, 8))
        {
            System.out.println("Found");
        }
        else
        {
            System.out.println("not found");
        }
    }
}

